//// mixin
// breakpoint
// @include breakpoint(maxMobile){ ... }
@mixin breakpoint($point) {
    @if $point == desktop {
        @media screen and (min-width: 1100px) { @content ; }
    }
    @if $point == minDesktop {
        @media screen and (min-width: 1024px) { @content ; }
    }
    @if $point == maxMobile {
        @media screen and (min-width: 720px) { @content ; }
    }
    @if $point == foldMobile {
        @media screen and (min-width: 530px) { @content ; }
    }
    @else if $point == minMobile {
        @media screen and (max-width: 320px) { @content ; }
    }
}

// Custom devices
// @include rwdWidth(1400) { ... }
@mixin rwdWidth($width) {
    @media (min-width: $width+'px') {
        @content;
    }
}

// box-sizing
// @include boxSizing(border-box);
@mixin boxSizing($box) {
    @each $prefix in -webkit-, '' {
        #{$prefix}box-sizing: $box;
    }
}

// box-shadow
// @include boxShadow(0 10px 5px 0 rgba(0, 0, 0, .5));
@mixin boxShadow($value){
    @each $prefix in -webkit-, '' {
        #{$prefix}box-shadow: $value;
    }
}

// transition
// @include transition(all, .3s, ease-out);
@mixin transition($what, $time, $how: null) {
    @each $prefix in -webkit-, -o-, '' {
        #{$prefix}transition: $what $time $how;
    }

    @if $how {
        transition-timing-function: $how;
    } @else {
        transition-timing-function: ease-out;
    }
}

// transition delay
// @include transitionDelay(.1s);
@mixin transitionDelay($delay) {
    @each $prefix in -webkit-, -o-, '' {
        #{$prefix}transition-delay: $delay;
    }
}

// transform
@mixin transform($transforms) {
    @each $prefix in -webkit-, -ms-, '' {
        #{$prefix}transform: $transforms;
    }
}

// transform : rotate
@mixin rotate($deg) {
    @include transform(rotate($deg));
}
 
@mixin rotateX($deg) {
    @include transform(rotateX($deg));
}
  
@mixin rotateY($deg) {
    @include transform(rotateY($deg));
}

// transform : scale
@mixin scale($x, $y) {
    @include transform(scale($x, $y));
}

// transform : scale x
@mixin scaleX($x) {
    @include transform(scaleX($x));
}

// transform : scale y
@mixin scaleY($y) {
    @include transform(scaleY($y));
}

// transform : translate XY
@mixin translateXY($x, $y) {
    @include transform(translate($x, $y));
}

// transform : translate X
@mixin translateX($x) {
    @include transform(translateX($x));
}

// transform : translate Y
@mixin translateY($y) {
    @include transform(translateY($y));
}

// transform : skew XY
@mixin skewXY($x, $y) {
    @include transform(skew($x, $y));
}

// transform : skew X
@mixin skewX($x) {
    @include transform(skewX($x));
}

// transform : skew Y
@mixin skewY($y) {
    @include transform(skewY($y));
}

// transform : transform-origin
@mixin transformOrigin($origin) {
    @each $prefix in -webkit-, -ms-, '' {
        #{$prefix}transform-origin: $origin;
    }
}

// close
// @include closeButton(#355ef0, 40px, 2px, #fff);
@mixin closeButton($bgColor, $size, $thickness, $lineColor) {
    & {
        display: inline-block;
        width: $size;
        height: $size;
        padding: $size/2;
        cursor: pointer;
    }
 
    @if $bgColor {
        background-color: $bgColor;
    } @else {
        background-color: transparent;
    }
 
    &:before,
    &:after {
        content: '';
        display: block;
        width: 140%;
        height: $thickness;
        background: $lineColor;
    }
 
    &:before {
        margin-top: -$thickness/4;
        margin-left: $thickness/2;
        @include rotate(45deg);
        @include transformOrigin(0 0);
    }
 
    &:after {
        margin-left: -41%;
        margin-top: -$thickness;
        @include rotate(-45deg);
        @include transformOrigin(100% 0);
    }
}

// arrow
// @include arrow(left, 8px, 8px, 2px, $color-5);
@mixin arrow($direction, $width, $height, $borderWidth, $color) {
    content: '';
    position: absolute;
    top: 50%;
    display: block;
    width: $width;
    height: $height;
    margin-top: -($height/2);
    border-width: 0;
    border-style: solid;
    border-color: $color;
    @include rotate(45deg);

    @if $direction == 'right' {
        border-top-width: $borderWidth;
        border-right-width: $borderWidth;
        border-bottom: none;
        border-left: none;
    } @else if $direction == 'left' {
        border-bottom-width: $borderWidth;
        border-left-width: $borderWidth;
        border-top: none;
        border-right: none;
    } @else if $direction == 'bottom' {
        border-bottom-width: $borderWidth;
        border-right-width: $borderWidth;
        border-top: none;
        border-left: none;
    } @else if $direction == 'top' {
        border-top-width: $borderWidth;
        border-left-width: $borderWidth;
        border-right: none;
        border-bottom: none;
    }
}

// rem
// @include rem(margin, 25px 20px 0);
// https://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@function parseInt($n) {
    // The mixin relies on a function to parse the integer from a value with a unit
    @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
    $px: (); // We define a list of values for both units
    $rem: (); // We define a list of values for both units

    @each $value in $values {
    // We iterate through each value in the given parameter $values

        @if $value == 0 or $value == auto {
            // If the value is either auto or 0, we append it to the list as-is
            $px: append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $unit: unit($value); // If the value has a unit, we split it to get both the unit and the raw value
            $val: parseInt($value); // If the value has a unit, we split it to get both the unit and the raw value

            @if $unit == 'px' {
                // We append according values to the lists depending on the unit of the given value
                $px: append($px, $value);
                $rem: append($rem, ($val / 16 / 2+ rem));
            }

            @if $unit == 'rem' {
                // We append according values to the lists depending on the unit of the given value
                $px: append($px, ($val * 16 + px));
                $rem: append($rem, $value);
            }
        }
    }

    @if $px == $rem {
        // If the two lists are the same, we ouput only one (like margin-top: 0)
        #{$property}: $px; // output the result
    } @else {
        #{$property}: $rem;  // output the result
        @include breakpoint(maxMobile){
            #{$property}: $px; // output the result
        }
    }
}

// Read the article: http://sassbreak.com/viewport-relative-headings-with-sass
// Function
@function get-vw($target){
    // 1 vw is equal to 1% of the viewport width
    $vw-context: ($max-mobile * .01) * 1px; // 1% viewport width
    @return ($target/$vw-context) * 1vw;
}

// Mixin
// @include vw(24px);
@mixin vw($size){
    font-size: get-vw($size);
    // Prevent font-size from getting too big
    @include breakpoint(maxMobile){
        font-size: $size;
    }
}

// animation
// @include animation(shadow, 2s) {
// 	0% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// 	50% { @include boxShadow(0, 0, 5px, 2px, rgba(251, 104, 90, .3)); }
// 	100% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// }

// @include animation(rotation, 16s, $iteration: infinite, $timing: linear ,$reverse: reverse) {
// 	100% { @include rotate(360deg); }
// }
@mixin animation($name, $duration, $iteration: null, $timing: null, $reverse: null) {
    //$name: inline-$name;

    @-webkit-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }

    animation-name: $name;
    animation-duration: $duration;

    @if $iteration {
        animation-iteration-count: $iteration;
    } @else {
        animation-iteration-count: 1;
    }

    @if $timing {
        animation-timing-function: $timing;
    } @else {
        animation-timing-function: ease;
    }

    @if $reverse {
        animation-direction: $reverse;
    } @else {
        animation-direction: normal;
    }
}

// percent
// top: percent(722, 1000);
// right: percent(50);
@function percent($target, $parent: $max-mobile) {
    @return percentage($target / $parent);
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient

// @include linear-gradient(#31B7D7, #EDAC7D);
// @include linear-gradient(to right, #fa6568 0%, #ff9048 100%);
// @include linear-gradient(190deg, #f2f3f7 0%, #f2f3f7 50%, #e1ebf5 50%, #e1ebf5 90%, #f2f3f7 90%, #f2f3f7 100%);
@mixin linear-gradient($direction, $color-stops...) {
    @if is-direction($direction) == false {
        $color-stops: ($direction, $color-stops);
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

// @include bg($color: #001d3d, $url: '#{$img-path}/pc/bg_top.jpg');
// @include bg($color: #a5d0fb, $url: '#{$img-path}/pc/bg_title.jpg', $size: cover);
@mixin bg($color: null, $url: null, $repeat: null, $position: null, $size: null){
    @if $color {
        background-color: $color;
    }


    @if $url {
        background-image: url($url);
    }

    @if $repeat {
        background-repeat: $repeat;
    } @else {
        background-repeat: no-repeat;
    }

    @if $position {
        background-position: $position;
    } @else {
        background-position: center top;
    }

    @if $size {
        background-size: $size;
    } @else {
        background-size: auto;
    }
}

// unifyParent
// @include unifyParent("h1") { ... }
@mixin unifyParent($child) {
    @at-root #{selector-unify(&, $child)} {
        @content;
    }
}
